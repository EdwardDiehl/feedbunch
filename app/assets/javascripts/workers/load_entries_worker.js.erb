/**
 * Web Worker to load entries in a separate thread.
 */

importScripts('<%= asset_path 'workers/common/do_get' %>');

// XmlHttpRequest object of the last HTTP request sent
var req;

// Timeout set to reattempt loading entries after a failure
var timeout;

// Callback for messages from the main thread
onmessage = function(e){
  // Constants for the different operations the web worker can perform
  var LOAD_FEED_ENTRIES = "load_feed_entries";
  var LOAD_FOLDER_ENTRIES = "load_folder_entries";
  var REFRESH_FEED = "refresh_feed";

  // Operation to perform
  var operation = e.data.operation;

  // CSRF token
  var token = e.data.token;

  // Cancel any currently running entries load operation before launching a new one
  if (req) {
    req.abort();
  }
  if (timeout){
    clearTimeout(timeout);
  }

  if (operation == LOAD_FEED_ENTRIES){
    // ID of the feed from which entries will be loaded
    var id = e.data.feed_id;
    var include_read = e.data.include_read;
    var page = e.data.page;
    var url = "/api/feeds/" + id + "/entries.json?include_read=" + include_read + "&page=" + page;

    get_data = do_get(operation, url, token, 0);
    req = get_data.req;
    timeout = get_data.timeout;
  }
  else if (operation == LOAD_FOLDER_ENTRIES){
    // ID of the folder from which entries will be loaded
    var id = e.data.folder_id;
    var include_read = e.data.include_read;
    var page = e.data.page;
    var url = "/api/folders/" + id + "/entries.json?include_read=" + include_read + "&page=" + page;

    req = do_get(operation, url, token, 0);
    timeout = get_data.timeout;
  }
}