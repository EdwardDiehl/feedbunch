########################################################
# AngularJS service to load the state of background jobs requested by the user
########################################################

angular.module('feedbunch').service 'jobStateSvc',
['$rootScope', '$timeout', '$window', 'csrfTokenSvc', 'feedsFoldersSvc', 'timerFlagSvc', 'findSvc', 'favicoSvc', 'userDataSvc',
($rootScope, $timeout, $window, csrfTokenSvc, feedsFoldersSvc, timerFlagSvc, findSvc, favicoSvc, userDataSvc)->

  # CSRF token
  token = csrfTokenSvc.get_token()

  # Web worker to retrieve the state of all refresh feed jobs of the user
  worker_refresh_jobs_states = new Worker '<%= asset_path 'workers/load_refresh_feed_jobs_states_worker' %>'
  worker_refresh_jobs_states.onmessage = (e) ->
    if e.data.status == 200
      $rootScope.refresh_feed_job_states = e.data.response.slice()
      for job_state in e.data.response
        # Periodically update the state of any running jobs
        load_refresh_feed_job_state job_state.id if job_state.state=="RUNNING"
    else if e.data.status == 401 || e.data.status == 422
      $window.location.href = '/login'
    else if e.data.status == 404
      $rootScope.refresh_feed_job_states = []
    else
      timerFlagSvc.start 'error_loading_job_states'

  # Web worker to retrieve the state of a single refresh feed job
  worker_single_refresh_job_state = new Worker '<%= asset_path 'workers/load_refresh_feed_jobs_states_worker' %>'
  worker_single_refresh_job_state.onmessage = (e) ->
    if e.data.status == 200
      # Update the current state of the job
      job = findSvc.find_refresh_feed_job e.data.response.id
      if job?
        job.state = e.data.response.state
        if job.state=="RUNNING"
          # If job is running, keep periodically updating its state
          load_refresh_feed_job_state job.id
        else if job.state=="ERROR"
          timerFlagSvc.start 'error_refreshing_feed'
        else if job.state=="SUCCESS"
          timerFlagSvc.start 'success_refresh_feed'
          feedsFoldersSvc.load_feed job.feed_id
    else if e.data.status == 401 || e.data.status == 422
      $window.location.href = '/login'
    else if e.data.status != 404
      timerFlagSvc.start 'error_loading_job_states'

  # Web worker to retrieve the state of all subscribe jobs of the user
  worker_subscribe_jobs_states = new Worker '<%= asset_path 'workers/load_subscribe_jobs_states_worker' %>'
  worker_subscribe_jobs_states.onmessage = (e) ->
    if e.data.status == 200
      $rootScope.subscribe_job_states = e.data.response.slice()
      for job_state in e.data.response
        # Periodically update the state of any running jobs
        load_subscribe_job_state job_state.id if job_state.state=="RUNNING"
    else if e.data.status == 401 || e.data.status == 422
      $window.location.href = '/login'
    else if e.data.status == 404
      $rootScope.subscribe_job_states = []
    else
      timerFlagSvc.start 'error_loading_job_states'

  # Web worker to retrieve the state of a single subscribe job.
  worker_single_subscribe_job_state = new Worker '<%= asset_path 'workers/load_subscribe_jobs_states_worker' %>'
  worker_single_subscribe_job_state.onmessage = (e) ->
    if e.data.status == 200
      job = findSvc.find_subscribe_job e.data.response.id
      if job?
        job.state = e.data.response.state
        if job.state=="RUNNING"
          # If job is running, keep periodically updating its state
          load_subscribe_job_state job.id
        else if job.state=="ERROR"
          timerFlagSvc.start 'error_subscribing'
        else if job.state=="SUCCESS"
          timerFlagSvc.start 'success_subscribe'
          job.feed_id = e.data.response.feed_id
          # Update the total subscribed feeds count
          userDataSvc.load_data()
    else if e.data.status == 401 || e.data.status == 422
      $window.location.href = '/login'
    else if e.data.status != 404
      timerFlagSvc.start 'error_subscribing'

  # Web worker to delete a refresh feed job state
  worker_delete_refresh_job_state = new Worker '<%= asset_path 'workers/delete_refresh_feed_job_state_worker' %>'

  # Web worker to delete a subscribe job state
  worker_delete_subscribe_job_state = new Worker '<%= asset_path 'workers/delete_subscribe_job_state_worker' %>'

  #---------------------------------------------
  # PRIVATE FUNCTION: load state of a single refresh feed job via AJAX.
  #
  # Receives as argument the id of the job.
  #---------------------------------------------
  load_refresh_feed_job_state = (job_id)->
    # Store running timers in a hash in the root scope
    $rootScope.refresh_job_state_timers ||= {}

    # Only start a timer to refresh the job state if there isn't a timer already refreshing that job state
    timer = $rootScope.refresh_job_state_timers[job_id]
    if !timer?
      timer = $timeout ->
        # Remove this timer from the list so that another update can be scheduled for 5 seconds in the future
        delete $rootScope.refresh_job_state_timers[job_id]
        worker_single_refresh_job_state.postMessage token: token, id: job_id
      , 5000
      # Store timer so that a second timer for the same job state is not started in the future
      $rootScope.refresh_job_state_timers[job_id] = timer

  #---------------------------------------------
  # PRIVATE FUNCTION: load state of a single subscribe job via AJAX.
  #
  # Receives as argument the id of the job.
  #---------------------------------------------
  load_subscribe_job_state = (job_id)->
    # Store running timers in a hash in the root scope
    $rootScope.subscribe_job_state_timers ||= {}

    # Only start a timer to refresh the job state if there isn't a timer already refreshing that job state
    timer = $rootScope.subscribe_job_state_timers[job_id]
    if !timer?
      timer = $timeout ->
        # Remove this timer from the list so that another update can be scheduled for 5 seconds in the future
        delete $rootScope.subscribe_job_state_timers[job_id]
        worker_single_subscribe_job_state.postMessage token: token, id: job_id
      , 5000
      # Store timer so that a second timer for the same job state is not started in the future
      $rootScope.subscribe_job_state_timers[job_id] = timer

  service =

    #---------------------------------------------
    # Load import process state via AJAX into the root scope
    #---------------------------------------------
    load_data: ->
      worker_refresh_jobs_states.postMessage {token: token}
      worker_subscribe_jobs_states.postMessage {token: token}

    #---------------------------------------------
    # Hide a refresh feed job state alert and notify the server via AJAX that it should be deleted
    # from the database (it will not appear again).
    #---------------------------------------------
    hide_refresh_job_alert: (job_state)->
      # Remove job state from scope
      job_state = findSvc.find_refresh_feed_job job_state.id
      if job_state?
        index = $rootScope.refresh_feed_job_states.indexOf job_state
        $rootScope.refresh_feed_job_states.splice index, 1 if index != -1

      # If there is a timer updating this job state, stop it.
      if $rootScope.refresh_job_state_timers?
        timer = $rootScope.refresh_job_state_timers[job_state.id]
        if timer?
          $timeout.cancel timer
          delete $rootScope.refresh_job_state_timers[job_state.id]

      worker_delete_refresh_job_state.postMessage token: token, id: job_state.id

    #---------------------------------------------
    # Hide a subscribe job state alert and notify the server via AJAX that it should be deleted
    # from the database (it will not appear again).
    #---------------------------------------------
    hide_subscribe_job_alert: (job_state)->
      # Remove job state from scope
      job_state = findSvc.find_subscribe_job job_state.id
      if job_state?
        index = $rootScope.subscribe_job_states.indexOf job_state
        $rootScope.subscribe_job_states.splice index, 1 if index != -1

      # If there is a timer updating this job state, stop it.
      if $rootScope.subscribe_job_state_timers?
        timer = $rootScope.subscribe_job_state_timers[job_state.id]
        if timer?
          $timeout.cancel timer
          delete $rootScope.subscribe_job_state_timers[job_state.id]

      worker_delete_subscribe_job_state.postMessage token: token, id: job_state.id

  return service
]