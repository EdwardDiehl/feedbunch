########################################################
# AngularJS service to load feeds
########################################################

angular.module('feedbunch').service 'loadFeedsSvc',
['$rootScope', '$http', 'feedsPaginationSvc', 'favicoSvc', 'animationsSvc', 'timerFlagSvc', 'cleanupSvc', 'findSvc',
($rootScope, $http, feedsPaginationSvc, favicoSvc, animationsSvc, timerFlagSvc, cleanupSvc, findSvc)->

  # Maximum number of feeds in each page.
  # This MUST match the feeds page size set in the server!
  feeds_page_size = 25

  #--------------------------------------------
  # PRIVATE FUNCTION: Load feeds. Depending on the value of the flag "show_read" it
  # will load all feeds (if true) or only feeds with unread entries (if false).
  #--------------------------------------------
  load_feeds = (page=0)->
    # If busy, do nothing
    return if feedsPaginationSvc.is_busy()

    # Indicate that AJAX request/response cycle is busy so no more calls are done until finished
    feedsPaginationSvc.set_busy true

    page += 1
    $http.get("/api/feeds.json?include_read=#{$rootScope.show_read}&page=#{page}")
    .success (data)->
      feedsPaginationSvc.load_feeds_page page, data.slice()
      feedsPaginationSvc.set_busy false

      # Load the next page of feeds until no more feeds are available
      if data.length < feeds_page_size
        # there are no more pages of feeds to retrieve
        $rootScope.feeds_loaded = true
        feedsPaginationSvc.pagination_finished()
        favicoSvc.update_unread_badge()
        animationsSvc.show_stats()
      else
        # There is probably at least one more page of feeds available
        load_feeds page
    .error (data, status)->
      $rootScope.feeds_loaded = true
      feedsPaginationSvc.set_busy false
      if status == 404
        # if a 404 is returned for the first page, there are no feeds at all. Set all unread counts to zero.
        if page == 1
          if $rootScope.feeds && $rootScope.feeds?.length > 0
            for feed in $rootScope.feeds
              feed.unread_entries = 0
        # If a 404 is returned in a page >1, there are no more feeds and this is the last page.
        else
          feedsPaginationSvc.pagination_finished()
        favicoSvc.update_unread_badge()
        animationsSvc.show_stats()
      else if status!=0
        timerFlagSvc.start 'error_loading_feeds'

  #--------------------------------------------
  # PRIVATE FUNCTION: Load a single feed. Receives its id as argument.
  #--------------------------------------------
  load_feed = (id)->
    # If feed pagination is busy, do nothing
    # This keeps from trying to load a single feed while the list of feeds is loading.
    return if feedsPaginationSvc.is_busy()

    # If this feed is already being loaded, do nothing
    $rootScope.loading_single_feed ||= {}
    return if $rootScope.loading_single_feed[id]

    $rootScope.loading_single_feed[id] = true
    $http.get("/api/feeds/#{id}.json")
    .success (data)->
      delete $rootScope.loading_single_feed[id]
      add_feed data
      favicoSvc.update_unread_badge()
    .error (data, status)->
      delete $rootScope.loading_single_feed[id]
      if status == 404
        # The requested feed does not exist in db, remove it from scope
        cleanupSvc.remove_feed id
      else
        timerFlagSvc.start 'error_loading_feeds' if status!=0

  #---------------------------------------------
  # PRIVATE FUNCTION: Push a feed in the feeds array if it isn't already present there.
  #
  # If the feeds array has not been created in the root scope, create it.
  #
  # If the feed is already in the feeds array, its unread_entries attribute is updated instead of
  # pushing it in the array again.
  #---------------------------------------------
  add_feed = (feed)->
    if !$rootScope.feeds || $rootScope.feeds?.length == 0
      $rootScope.feeds = [feed]
    else
      feed_old = findSvc.find_feed feed.id
      if feed_old?
        feed_old.unread_entries = feed.unread_entries
      else
        $rootScope.feeds.push feed

  #--------------------------------------------
  # PRIVATE FUNCTION: Load feeds inside a single folder. Receives the folder as argument.
  #--------------------------------------------
  load_folder_feeds = (folder)->
    # If feeds in this folder are already being loaded, do nothing
    $rootScope.loading_single_folder_feeds ||= {}
    return if $rootScope.loading_single_folder_feeds[folder.id]

    $rootScope.loading_single_folder_feeds[folder.id] = true

    $http.get("/api/folders/#{folder.id}/feeds.json?include_read=#{$rootScope.show_read}")
    .success (data)->
      delete $rootScope.loading_single_folder_feeds[folder.id]
      # Update unread counts with the received feeds. Set the unread counter for any feed in the folder but
      # not in the received JSON to zero.
      update_folder_feeds folder, data.slice()
    .error (data, status)->
      delete $rootScope.loading_single_folder_feeds[folder.id]
      if status==404
        # If the server returns a 404, there are no feeds to return; set unread count to zero for all feeds in
        # the folder.
        update_folder_feeds folder, null
      else if status != 0
        timerFlagSvc.start 'error_loading_folders'

  #---------------------------------------------
  # PRIVATE FUNCTION: Update the feeds and their unread counts, for feeds in a folder.
  #
  # Receives as arguments the folder and an array of feeds.
  #
  # Operations in the scope:
  # The unread_count for each feed passed in the array is updated with the value passed in the array.
  # Those feeds in the folder which are not present in the passed array will have their unread_count set to zero.
  #
  # NOTE.- If a null is passed in the feeds argument, all feeds in the folder will have their unread counts set to zero.
  #---------------------------------------------
  update_folder_feeds = (folder, feeds)->
    # Set unread count for all feeds in the folder to zero, then set the actual received value for each feed.
    # Those feeds not present in the received JSON will be set to zero.
    feeds_in_folder = findSvc.find_folder_feeds folder
    for feed in feeds_in_folder
      feed.unread_entries = 0
    if feeds? && feeds?.length > 0
      for feed in feeds
        add_feed feed

  service =

    #---------------------------------------------
    # Load a single feed
    #---------------------------------------------
    load_feed: load_feed

    #---------------------------------------------
    # Load all feeds
    #---------------------------------------------
    load_feeds: load_feeds

    #---------------------------------------------
    # Load feeds in a single folder via AJAX into the root scope.
    #---------------------------------------------
    load_folder_feeds: (folder)->
      # If passed folder is "all", load all feeds in a paginated fashion.
      if folder=='all' || folder?.id == 'all'
        load_feeds()
      # If any other folder is passed, load feeds in that folder only (not paginated)
      else
        load_folder_feeds folder

  return service
]